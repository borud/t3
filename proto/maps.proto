syntax = "proto3";
package apipb;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "pkg/apipb";

// A map data element with a timestamp given in milliseconds since epoch and some data
message Map {
	// Unique ID assigned by backend
	uint64 id = 1;

	// Timestamp in milliseconds since epoch
	uint64 timestamp = 2;

	// Binary data
	bytes data = 3;
}

// Response to an AddMap request
message AddMapResponse {
	uint64 id = 1;
}

// ListMapsResponse contains zero or more maps
message ListMapsResponse {
	repeated Map maps = 1;
}

// Request to get map by id
message GetMapRequest {
	uint64 id = 1;
}

// Request to delete map by id
message DeleteMapRequest {
	uint64 id = 1;
}

service Maps {
	// AddMap returns an AddMapResponse which contains the assigned id.
	rpc AddMap(Map) returns (AddMapResponse) {
		option (google.api.http) = {
			post: "/maps"
			body: "*"
		};
	};

	// ListMaps returns a ListMapResponse with zero or more Maps
	rpc ListMaps(google.protobuf.Empty) returns (ListMapsResponse) {
		option (google.api.http) = {
			get : "/maps"
		};
	};

	// GetMap returns map given by the id specified in GetMapRequest.
	rpc GetMap(GetMapRequest) returns (Map) {
		option (google.api.http) = {
			get: "/maps/{id}"
		};
	};

	// Update updates the map.
	rpc Update(Map) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			patch: "/maps/{id}"
			body: "*"
		};
	};

	// DeleteMap deletes the map given by id in DeleteMapRequest.
	rpc DeleteMap(DeleteMapRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/maps/{id}"
		};
	};
}
